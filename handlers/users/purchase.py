import logging

from aiogram.dispatcher.filters import Command,Text
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from keyboards.inline.callback_datas import buy_callback
from keyboards.inline.choice_buttons import choice, pear_keyboard, apples_keyboard,\
    eda,lifehack,news,vkus,skils,connect,ed,drin,kats,eatO ,free, pots,pans,colds,peat,donates,free_eat,\
    alls,shcars,sites
#from keyboards.inline import eda
from keyboards.defolt import menu
from keyboards.inline import fruitt,defolt,feda,milk,other,small,wow
from config import url_donate
from loader import dp, bot

@dp.message_handler(text="–ï–¥–∞ üçè")
async def EDA(message: Message):
    await message.answer(text='–ö–∞–∫–∞—è —Ü–µ–ª—å –ø–æ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω?',reply_markup=eda)

@dp.message_handler(text="–õ–∞–π—Ñ—Ö–∞–∫–∏ –∏ —Ö–∞–ª—è–≤–∞ üëå")
async def LIFEHACK(message: Message):
    await message.answer(text='–Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –æ—Å–æ–±–µ–Ω–Ω—ã–µ –≤–∑–ª–æ–º—ã –∂–∏–∑–Ω–∏',reply_markup=lifehack)

@dp.message_handler(text="–ù–æ–≤–æ—Å—Ç–∏ –ú–æ—Å–∫–≤—ã")
async def show_items(message: Message):
    await message.answer(text='–°–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ç–æ–ª–∏—Ü—ã —Ç—É—Ç',reply_markup=news)

@dp.message_handler(text="–°–Ω–∞—á–∞–ª–∞")
async def show_items(message: Message):
    await message.answer(text=f'–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.full_name}!\n –Ø - <b>–°—Ç—É–¥–•–µ–ª–ø–µ—Ä</b>, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –∏ –≤–∫—É—Å–Ω–æ–≥–æ:)', reply_markup=restart)

@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üÜò")
async def donate(message: Message):
    await message.answer(text='–Ø –æ—á–µ–Ω—å —Ä–∞–¥, –µ—Å–ª–∏ –º–æ–π –±–æ—Ç –≤–∞–º –ø–æ–º–æ–≥. –û–¥–Ω–∞–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏,—Å–µ—Ä–≤–µ—Ä –æ—á–µ–Ω—å –∑–∞—Ç—Ä–∞—Ç–Ω–æ.\n'
                              '\–ë—É–¥—É –∫—Ä–∞–π–Ω–µ –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω –∫–∞–∂–¥–æ–º—É —Ä—É–±–ª—é –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é.\n–†–µ–∫–≤–µ–∑–∏—Ç—ã: QIWI +79520669369\n–ö–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ-–ë–∞–Ω–∫ 5536 9137 8751 6745',reply_markup=donates)

@dp.message_handler(text="–ö–Ω–∏–≥–∞ –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ‚úç")
async def show_items(message: Message):
    await message.answer(text='–Ø –±—É–¥—É –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –∫—Ä–∏—Ç–∏–∫–∞.\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π!', reply_markup=connect)

@dp.message_handler(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí")
async def show_items(message: Message):
    await message.answer(text='–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ:*–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*', reply_markup=None)

# –ü–æ–ø—Ä–æ–±—É–π–µ–º –æ—Ç–ª–æ–≤–∏—Ç—å –ø–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É, –≥–¥–µ –≤ –Ω–∞—à–µ–º call.data —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è "pear"
@dp.callback_query_handler(text_contains="pear")
async def buying_pear(call: CallbackQuery):
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–∑—É —Å–¥–µ–ª–∞—Ç—å answer, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É.
    # –£–∫–∞–∂–µ–º cache_time, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–æ–ª—É—á–∞–ª –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –∞–ø–¥–µ–π—Ç—ã, —Ç–æ–≥–¥–∞ –Ω–∏–∂–Ω–∏–π –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è.
    await call.answer(cache_time=60)

    callback_data = call.data

    # –û—Ç–æ–±—Ä–∞–∑–∏–º —á—Ç–æ —É –Ω–∞—Å –ª–µ–∂–∏—Ç –≤ callback_data
    # logging.info(f"callback_data='{callback_data}'")
    # –í Python 3.8 –º–æ–∂–Ω–æ —Ç–∞–∫, –µ—Å–ª–∏ —É –≤–∞—Å –æ—à–∏–±–∫–∞, —Ç–æ —Å–¥–µ–ª–∞–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–ø–æ—Å–æ–±–æ–º!
    logging.info(f"{callback_data=}")

    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É–ø–∏—Ç—å –≥—Ä—É—à—É. –ì—Ä—É—à–∞ –≤—Å–µ–≥–æ –æ–¥–Ω–∞. –°–ø–∞—Å–∏–±–æ.",
                              reply_markup=pear_keyboard)
###
@dp.callback_query_handler(text_contains="vkus")
async def vkusn(call: CallbackQuery):
    await call.message.answer("–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?", reply_markup= vkus)
###

@dp.callback_query_handler(text_contains="time")
async def time(call: CallbackQuery):
    await call.message.answer("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∫–∏", reply_markup=skils)
###

@dp.callback_query_handler(text_contains="now")
async def now(call: CallbackQuery):
    await call.message.answer("–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—à—å?", reply_markup=ed)
###
@dp.callback_query_handler(text_contains="product")
async def time(call: CallbackQuery):
    await call.message.answer("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∫–∏", reply_markup=skils)
###

@dp.callback_query_handler(text_contains="pot")
async def product_pot(call: CallbackQuery):
    await call.message.answer("–ë–ª—é–¥–∞ –≤ –∫–∞—Å—Ç—Ä—é–ª–µ:", reply_markup= pots)
###

@dp.callback_query_handler(text_contains="pan")
async def product_pan(call: CallbackQuery):
    await call.message.answer("–ë–ª—é–¥–∞ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–∫–µ", reply_markup= pans)
###

@dp.callback_query_handler(text_contains="cold")
async def product_cold(call: CallbackQuery):
    await call.message.answer("–°–∞–ª–∞—Ç—ã –∏ –¥–µ—Å–µ—Ä—Ç—ã", reply_markup= colds)
###

@dp.callback_query_handler(text_contains="all")
async def ALL(call: CallbackQuery):
    await call.message.answer("–í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã", reply_markup= alls)
###

@dp.callback_query_handler(text_contains="easy")
async def product1(call: CallbackQuery):
    await call.message.answer("–ù–∞ —á–µ–º –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∏—Ç—å?", reply_markup= peat)
###

@dp.callback_query_handler(text_contains="hard")
async def product2(call: CallbackQuery):
    await call.message.answer("–ù–∞ —á–µ–º –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∏—Ç—å?", reply_markup= peat)
###

@dp.callback_query_handler(text_contains="fruit")
async def fruits(call: CallbackQuery):
    await call.message.answer("–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", reply_markup= fruit)

###

@dp.callback_query_handler(text_contains="choose")
async def choose(call: CallbackQuery):
    await call.message.answer("–°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup= kats)
###

@dp.callback_query_handler(text_contains="xz")
async def xz(call: CallbackQuery):
    await call.message.answer("–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç...\n*–†–∞–Ω–¥–æ–º –≤ —Ä–∞–∑–∞–±–æ–æ—Ç–∫–µ*", reply_markup= skils)
###

@dp.callback_query_handler(text_contains="drink")
async def drink(call: CallbackQuery):
    await call.message.answer("–ö–∞–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", reply_markup= drin)
###

@dp.callback_query_handler(text_contains="eat")
async def eat(call: CallbackQuery):
    await call.message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å?", reply_markup= eatO)
###

@dp.callback_query_handler(text_contains="free")
async def free_f(call: CallbackQuery):
    await call.message.answer("–ê–∫—Ü–∏–∏ –∏ –∫—É–ø–æ–Ω—ã –Ω–∞:", reply_markup= free)
###

@dp.callback_query_handler(text_contains="feat")
async def feat(call: CallbackQuery):
    await call.message.answer("–ö—É–ø–æ–Ω—ã –Ω–∞:", reply_markup= free_eat)
###

@dp.callback_query_handler(text_contains="shcar")
async def feat(call: CallbackQuery):
    await call.message.answer("–ö—É–ø–æ–Ω—ã –Ω–∞ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥:", reply_markup= shcars)
###

@dp.callback_query_handler(text_contains="site")
async def feat(call: CallbackQuery):
    await call.message.answer("–ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã:", reply_markup= sites)
###

@dp.callback_query_handler(buy_callback.filter(item_name="apple"))
async def buying_apples(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)

    # –í—ã–≤–µ–¥–µ–º callback_data –∏ —Ç—É—Ç, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º.
    logging.info(f"{callback_data=}")

    quantity = callback_data.get("quantity")
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É–ø–∏—Ç—å —è–±–ª–æ–∫–∏. –Ø–±–ª–æ–∫ –≤—Å–µ–≥–æ {quantity}. –°–ø–∞—Å–∏–±–æ.",
                              reply_markup=apples_keyboard)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –æ—Ç CallbackData


@dp.callback_query_handler(text_contains="back")
async def cancel_buying(call: CallbackQuery):
    # –û—Ç–≤–µ—Ç–∏–º –≤ –æ–∫–æ—à–∫–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º!
    #await call.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —ç—Ç—É –ø–æ–∫—É–ø–∫—É!", show_alert=True)

    # –í–∞—Ä–∏–∞–Ω—Ç 1 - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–ª–≤–∞–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –µ–µ —É–±—Ä–∞—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è!
    await call.message.edit_reply_markup(text='rename',reply_markup=skils)

    # –í–∞—Ä–∏–∞–Ω—Ç 2 –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–æ API)
    # await bot.edit_message_reply_markup(chat_id=call.from_user.id,
    #                                     message_id=call.message.message_id,
    #                                     reply_markup=None)
